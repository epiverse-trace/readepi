[{"path":"https://epiverse-trace.github.io/readepi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 readepi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"readepi: Reading data from health information systems","text":"Health-related data general, epidemiological data particular, stored files, relation database management systems (RDBMS), health information systems (). category includes numerous options, various file formats, RDBMS types, APIs. Import data repositories involve usage different format-specific functions API-specific packages, exhausting task end users. main objective {readepi} package simplify process reading health-related data diverse sources, allowing user focus downstream analysis tasks. {readepi} also streamlines way data read single function —imports data specified systems (can SQL database, API) using readepi() function, returns list object containing one data frames. current implementation {readepi} provides function reading data three common : (REDCap, DHIS2, Fingertips), RDBMS MS SQL, MySQL, PostgreSQL. utility functions processing manipulating imported data, row column/row sub-setting, also included package.","code":"# LOAD readepi library(\"readepi\") # nolint"},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"reading-data-from-rdbms","dir":"Articles","previous_headings":"","what":"Reading data from RDBMS","title":"readepi: Reading data from health information systems","text":"Health related research data usually stored either relational databases non-SQL databases. example, MRCG@LSHTM, projects data stored relational databases. SQL-based database run specific sever. current version {readepi} package supports reading data MS SQL, MySQL, PostgreSQL servers. read data MS SQL database, user expected , least, read access database. user credential details stored file. Also, users using operating system Microsoft need appropriate MS driver installed system. following section show install drivers describe structure credentials file.","code":""},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"ms-sql-drivers-for-osx-based-systems","dir":"Articles","previous_headings":"Reading data from RDBMS","what":"MS SQL drivers for OSX-based systems","title":"readepi: Reading data from health information systems","text":"Reading data Unix-based systems require install MS ODBC driver compatible version target MS SQL server. example, ODBC Driver 17 compatible SQL server 2019, version 15.0. Mac users can follow instructions install MS SQL ODBC driver. Choose appropriate driver, open terminal, run instructions. installation MS SQL driver 17 Mac installation MS SQL driver 13.1 Mac","code":"driver=17 brew install unixodbc brew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release brew update brew install msodbcsql${driver} brew install mssql-tools ODBCSYSINI=/ brew install unixodbc brew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release brew update brew install msodbcsql@13.1.9.2 brew install mssql-tools@14.0.6.0 ODBCSYSINI=/"},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"ms-sql-drivers-for-linux-based-systems","dir":"Articles","previous_headings":"Reading data from RDBMS","what":"MS SQL drivers for Linux-based systems","title":"readepi: Reading data from health information systems","text":"Note requires Ubuntu 16.04 . Choose appropriate driver, open terminal type instructions : installation MS SQL driver version 17 Ubuntu installation MS SQL driver version 13.1 Ubuntu installation MS SQL driver Linux distributions install MS SQL driver Linux distributions, Debian Fedora, click follow instructions. installation, check installed drivers using: command return list installed drivers facing issues driver installation process, consult odbc github page MS documentation topic. also important view data stored MS SQL server. purpose, recommend install graphical user interface (GUI) Azure Data Studio.","code":"driver=17 sudo su curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list > /etc/apt/sources.list.d/mssql-release.list exit  sudo apt-get update sudo ACCEPT_EULA=Y apt-get install -y msodbcsql${driver} sudo ACCEPT_EULA=Y apt-get install -y mssql-tools echo 'export PATH=\"$PATH:/opt/mssql-tools/bin\"' >> ~/.bashrc source ~/.bashrc sudo apt-get install -y unixodbc-dev sudo su curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list exit sudo apt-get update sudo ACCEPT_EULA=Y apt-get install msodbcsql sudo ACCEPT_EULA=Y apt-get install mssql-tools echo 'export PATH=\"$PATH:/opt/mssql-tools/bin\"' >> ~/.bashrc source ~/.bashrc sudo apt-get install unixodbc-dev odbc::odbcListDrivers()"},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"main-arguments","dir":"Articles","previous_headings":"Reading data from RDBMS","what":"Main arguments","title":"readepi: Reading data from health information systems","text":"readepi() function expects following arguments: data_source: (required) URL target . records: (optional) vector comma-separated string subject IDs. specified, records correspond subjects imported. fields: (optional) vector comma-separated string column names. provided, columns imported. id_position: (optional) column position variable unique identifies subjects. ’s default value 1. id_col_name: (optional) name column unique identifies subjects.","code":""},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"credentials-file","dir":"Articles","previous_headings":"Reading data from RDBMS > Main arguments","what":"Credentials file","title":"readepi: Reading data from health information systems","text":"access data stored database management system requires valid user credentials, user name password. {readepi} package expect user credential details saved tab-separated file. path constitute value credentials_file argument readepi() function. credential (tab-delimited) file must contain following columns: user_name: user name.  password: user password (REDCap, corresponds token).  host_name: host name (REDCap, corresponds host URL).  project_id: name database (relation DB) name project (REDCap API) contains data interest.  comment: (optional) brief description project database interest.  dbms: type DBMS. Possible values : REDCap reading REDCap; MySQL reading MySQL server, SQLServer reading MS SQL server, PostgreSQL reading PostgreSQL system.  port: (optional) port ID, used MS SQL servers. see structure toy credentials file used template {readepi} package, use show_example_file() function shown .","code":"# DISPLAY THE STRUCTURE OF THE TEMPLATE CREDENTIALS FILE show_example_file()"},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"examples","dir":"Articles","previous_headings":"Reading data from RDBMS","what":"Examples","title":"readepi: Reading data from health information systems","text":"section contains various examples demonstrating {readepi} imports data databases. assume credentials stored file explained . Furthermore, examples based MySQL server need user supply driver name.","code":"# DEFINING THE PATH TO THE TEMPLATE CREDENTIALS FILE credentials_file <- system.file(\"extdata\", \"test.ini\", package = \"readepi\")"},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"listing-names-of-all-tables-in-a-database","dir":"Articles","previous_headings":"Reading data from RDBMS > Examples","what":"Listing names of all tables in a database","title":"readepi: Reading data from health information systems","text":"display list tables database interest, use:","code":"show_tables(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   driver_name      = \"\" ) # use driver_name = \"ODBC Driver 17 for SQL Server\" when reading from MS SQL # server"},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"fetching-data-from-a-mysql-server-using-the-table-names","dir":"Articles","previous_headings":"Reading data from RDBMS > Examples","what":"Fetching data from a MySQL server using the table names","title":"readepi: Reading data from health information systems","text":"importing data MS SQL, MySQL PostgreSQL servers, user needs provide following additional arguments: driver_name: name MS driver (MS SQL servers). : name table data fetched. can also SQL query used fetching data system.","code":"# VISUALIZING THE FIRST 5 ROWS OF THE TABLE 'author' visualise_table(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"author\", # this is the table name   driver_name      = \"\" )  # READING ALL FIELDS AND ALL RECORDS FROM ONE TABLE (`author`) dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"author\", # this is the table name   driver_name      = \"\" )  # READING SPECIFIED FIELDS AND ALL RECORDS FROM ONE TABLE fields <- \"author_id,name,last_name,initials\" dat    <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"author\", # this is the table name   driver_name      = \"\",   fields           = fields # these are  the columns of interest. )  # READING SPECIFIED RECORDS AND ALL FIELDS FROM ONE TABLE records <- \"1, 34, 15, 70, 118, 20\" dat     <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"author\", # this is the table name   driver_name      = \"\",   records          = records,   id_position      = 1L )  # READING SPECIFIED FIELDS AND RECORDS ONE THE TABLE dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"author\", # this is the table name   driver_name      = \"\",   records          = records,   fields           = fields,   id_col_name      = \"author_id\" )  # READING DATA FROM SEVERAL TABLES table_names <- c(\"author\", \"family_author\") dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = table_names, # this is the table name   driver_name      = \"\" )  # READING DATA FROM SEVERAL TABLES AND SUBSETTING FIELDS ACROSS TABLES fields <- c(   \"author_id,name,last_name,initials\",   \"rfam_acc,author_id\" ) # the first string in the field vector corresponds to the name of the # columns of interest from the first table specified in the `table_names` # argument and so on... dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = table_names, # this is the table name   driver_name      = \"\",   fields           = fields )  # READING DATA FROM SEVERAL TABLES AND SUBSETTING RECORDS ACROSS TABLES records <- c(   \"1, 34, 15, 70, 118, 20\",   \"RF00591,RF01420,RF01421\" ) # \"note that first string in the records vector corresponds to the records of # interest from the first table specified in the `table_name` argument and so # on... when the id column is not the first column in a table, # use the `id_position`\" dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = table_names, # this is the table name   driver_name      = \"\",   records          = records,   id_position      = c(1, 1) # nolint )  # READING DATA FROM SEVERAL TABLES AND SUBSETTING RECORDS AND FIELDS ACROSS # TABLES dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = table_names, # this is the table name   driver_name      = \"\",   records          = records,   fields           = fields,   id_col_name      = c(\"author_id\", \"rfam_acc\") )"},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"fetching-data-using-an-sql-query","dir":"Articles","previous_headings":"Reading data from RDBMS > Examples","what":"Fetching data using an SQL query","title":"readepi: Reading data from health information systems","text":"","code":"# SELECT FEW COLUMNS FROM ONE TABLE AND LEFT JOIN WITH ANOTHER TABLE dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"select author.author_id, author.name,   family_author.author_id from author left join family_author on   author.author_id = family_author.author_id\",   driver_name      = \"\" )  # SELECT ALL DATA FROM THE author TABLE dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"select * from author\",   driver_name      = \"\" )  # SELECT FEW COLUMNS FROM THE author TABLE dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"select author_id, name, last_name from author\",   driver_name      = \"\" )  # SELECT FEW RECORDS FROM THE author TABLE dat <- readepi(   data_source = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   source = \"select * from author where author_id in ('1','20','50')\",   driver_name = \"\" )  # SELECT FEW RECORDS AND FIELDS FROM THE author TABLE dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"select author_id, name, last_name from author where   author_id in ('1','20','50')\",   driver_name      = \"\" )"},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"reading-data-from-his","dir":"Articles","previous_headings":"Reading data from RDBMS","what":"Reading data from HIS","title":"readepi: Reading data from health information systems","text":"current version {readepi} supports reading data three common : REDCap, DHIS2, Fingertips.","code":""},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"importing-data-from-redcap","dir":"Articles","previous_headings":"Reading data from RDBMS > Reading data from HIS","what":"Importing data from REDCap","title":"readepi: Reading data from health information systems","text":"Research Electronic Data Capture (REDCap) web-based application workflow methodology designing clinical translational research databases. import data REDCap-based repo, readepi() function takes following arguments: data_source: URL REDCap server (mandatory) credentials_file: credentials file (mandatory) records: list desired records (optional) fields: list desired columns (optional) data associated metadata returned successful import.","code":"# READING ALL FIELDS AND RECORDS FROM A REDCap PROJECT dat <- readepi(   data_source      = \"https://bbmc.ouhsc.edu/redcap/api/\",   credentials_file = credentials_file ) project_data <- dat[[\"data\"]] project_metadeta <- dat[[\"metadata\"]]  # READING SPECIFIC FIELDS AND ALL RECORDS FROM THE PROJECT fields <- c(\"record_id\", \"name_first\", \"age\", \"bmi\") dat <- readepi(   data_source      = \"https://bbmc.ouhsc.edu/redcap/api/\",   credentials_file = credentials_file,   fields           = fields )  # READING SPECIFIC RECORDS AND ALL FIELDS FROM THE PROJECT records <- c(\"1\", \"3\", \"5\") dat <- readepi(   data_source      = \"https://bbmc.ouhsc.edu/redcap/api/\",   credentials_file = credentials_file,   records          = records,   id_col_name      = \"record_id\" )  # READING SPECIFIC RECORDS AND FIELDS FROM THE PROJECT dat <- readepi(   data_source      = \"https://bbmc.ouhsc.edu/redcap/api/\",   credentials_file = credentials_file,   records          = records,   fields           = fields,   id_col_name      = \"record_id\" ) project_data <- dat[[\"data\"]] project_metadeta <- dat[[\"metadata\"]]"},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"importing-data-from-dhis2","dir":"Articles","previous_headings":"Reading data from RDBMS","what":"Importing data from DHIS2","title":"readepi: Reading data from health information systems","text":"DHIS2 open source software transformed global health information management. readepi() function can import data DHIS2-based repositories following arguments: data_source: URL target DHIS2 system (required) credentials_file: credentials file (required) dataset: vector comma-separated list dataset identifier (optional) organisation_unit: vector comma-separated list organisation unit identifier (optional) data_element_group: vector comma-separated list data element group (optional) start_date: start date time span values export (required) end_date: end date time span values export (required) id_col_name: column name records interest (optional) records: list desired records (optional) fields: list desired columns (optional)","code":"# GETTING THE DATA ELEMENT IDENTIFIERS AND NAMES data_elements <- get_dhis2_attributes(   base_url = \"https://play.dhis2.org/dev/\",   username = \"admin\",   password = \"district\",   which    = \"dataElements\" )  # GETTING THE DATASET IDENTIFIERS AND NAMES datasets <- get_dhis2_attributes(   base_url = \"https://play.dhis2.org/dev/\",   username = \"admin\",   password = \"district\",   which    = \"dataSets\" )  # GETTING THE ORGANISATION UNIT IDENTIFIERS AND NAMES organisation_units <- get_dhis2_attributes(   base_url = \"https://play.dhis2.org/dev/\",   username = \"admin\",   password = \"district\",   which    = \"organisationUnits\" )  # GETTING THE DATA ELEMENT GROUP IDENTIFIERS AND NAMES data_element_groups <- get_dhis2_attributes(   base_url = \"https://play.dhis2.org/dev/\",   username = \"admin\",   password = \"district\",   which    = \"dataElementGroups\" )  # READING THE DATASET ID `pBOMPrpg1QX` dat <- readepi(   data_source        = \"https://play.dhis2.org/dev\",   credentials_file   = credentials_file,   dataset            = \"pBOMPrpg1QX\",   organisation_unit  = \"DiszpKrYNg8\",   data_element_group = NULL,   start_date         = \"2014\",   end_date           = \"2023\" )  # READING DATA FROM 2 DATASETS `pBOMPrpg1QX` dat <- readepi(   data_source        = \"https://play.dhis2.org/dev\",   credentials_file   = credentials_file,   dataset            = \"pBOMPrpg1QX,BfMAe6Itzgt\",   organisation_unit  = \"DiszpKrYNg8\",   data_element_group = NULL,   start_date         = \"2014\",   end_date           = \"2023\" )  # READING SPECIFIC DATA ELEMENTS FROM THE DATASET ID `pBOMPrpg1QX` data_elts <- c(\"FTRrcoaog83\", \"eY5ehpbEsB7\", \"Ix2HsbDMLea\") dat <- readepi(   data_source        = \"https://play.dhis2.org/dev\",   credentials_file   = credentials_file,   dataset            = \"pBOMPrpg1QX\",   organisation_unit  = \"DiszpKrYNg8\",   data_element_group = NULL,   start_date         = \"2014\",   end_date           = \"2023\",   records            = data_elts,   id_col_name        = \"dataElement\" )  # READING SPECIFIC COLUMNS FROM A DATASET dat <- readepi(   data_source        = \"https://play.dhis2.org/dev\",   credentials_file   = credentials_file,   dataset            = \"pBOMPrpg1QX,BfMAe6Itzgt\",   organisation_unit  = \"DiszpKrYNg8\",   data_element_group = NULL,   start_date         = \"2014\",   end_date           = \"2023\",   fields             = c(\"dataElement\", \"period\", \"value\") ) test_data <- data[[\"data\"]]"},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"importing-data-from-fingertips","dir":"Articles","previous_headings":"Reading data from RDBMS","what":"Importing data from Fingertips","title":"readepi: Reading data from health information systems","text":"Fingertips repository public health data indicators England, data organised themed profiles. readepi() function allows import data Fingertips-based APIs using following arguments: indicator_id: indicator ID indicator_name: indicator name area_type_id: area type ID. determines geographic area imported data (required) parent_area_type_id: parent area type code specified area type ID profile_id: profile ID profile_name: profile name domain_id: domain ID domain_name: domain name records: list desired records fields: list desired columns id_col_name: column name records interest id_position: column position variable unique identifies subjects. default 1. worth noting , reading data, readepi() function makes wrapper-calls major functions fingertipsR, pre-existing R package reads data Fingertips databases.","code":""},{"path":"https://epiverse-trace.github.io/readepi/articles/readepi.html","id":"examples-1","dir":"Articles","previous_headings":"Reading data from RDBMS > Importing data from Fingertips","what":"Examples","title":"readepi: Reading data from health information systems","text":"section provides various examples demonstrating {readepi} imports data Fingertips-based APIs.","code":"# GET THE INFORMATION ABOUT THE INDICATOR PROFILES, DOMAIN, AREA TYPE, ... metadata <- get_fingertips_metadata() head(metadata[[\"indicator_profile_domain\"]]) head(metadata[[\"indicator_ids_names\"]]) head(metadata[[\"area_type\"]])  # IMPORTING DATA USING THE INDICATOR ID dat <- readepi(   indicator_id = 90362L,   area_type_id = 202L )  # IMPORTING DATA USING THE INDICATOR NAME dat <- readepi(   indicator_name = \"Healthy life expectancy at birth\",   area_type_id   = 202L )  # IMPORTING DATA USING THE DOMAIN NAME dat <- readepi(   domain_name  = \"A. Overarching indicators\",   area_type_id = 202L )  dat <- readepi(   indicator_name = \"Healthy life expectancy at birth\",   area_type_id   = 202L,   domain_name    = \"A. Overarching indicators\" )  # IMPORTING DATA USING THE PROFILE ID dat <- readepi(   profile_id   = 19L,   area_type_id = 202L )  # IMPORTING DATA FROM SPECIFIC INDICATOR, DOMAIN, PROFILE, AREA TYPE dat <- readepi(   indicator_id        = 90362L,   indicator_name      = \"Healthy life expectancy at birth\",   area_type_id        = 202L,   parent_area_type_id = 6L,   profile_id          = 19L,   profile_name        = \"Public Health Outcomes Framework\",   domain_id           = 1000049L,   domain_name         = \"A. Overarching indicators\",   fields              = NULL,   records             = NULL,   id_position         = NULL,   id_col_name         = NULL )  # IMPORTING DATA AND SUBSETTING SPECIFIC RECORDS AND FIELDS dat <- readepi(   indicator_id = 90362L,   area_type_id = 202L,   fields       = c(\"IndicatorID\", \"AreaCode\", \"Age\", \"Value\"),   records      = c(\"E92000001\", \"E12000002\", \"E12000009\"),   id_col_name  = \"AreaCode\" )"},{"path":"https://epiverse-trace.github.io/readepi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Karim Mané. Author, maintainer. Bubacarr Bah. Contributor. Bankolé Ahadzie. Contributor. Nuredin Mohammed. Contributor. Abdoelnaser Degoot. Contributor. Hugo Gruson. Reviewer. Pratik Gupte. Reviewer. Andree Valle-Campos. Reviewer.","code":""},{"path":"https://epiverse-trace.github.io/readepi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Karim Mané, Nuredin Mohammed, Bankolé Ahadzie, Abdoelnaser Degoot, Bubacarr Bah (2023). readepi: Read Data Health Information Systems website: https://github.com/epiverse-trace/readepi/","code":"@Manual{,   title = {Read Data From Health Information Systems},   author = {Karim Mané and Nuredin Mohammed and Bubacarr Bah and Bankolé Ahadzie and Abdoelnaser Degoot},   year = {2023},   url = {https://github.com/epiverse-trace/readepi}, }"},{"path":"https://epiverse-trace.github.io/readepi/index.html","id":"readepi-read-data-from-health-information-systems-","dir":"","previous_headings":"","what":"Read Data From Health Information Systems","title":"Read Data From Health Information Systems","text":"{readepi} R package reading data several health information systems () including public repositories, relational database management systems (RDBMS). {readepi} currently supports reading data followings: RDBMS (Relational Database Management Systems) MS SQL, MySQL, PostgreSQL  REDCap: Research Electronic Data Capture - secure web application building managing online surveys databases DHIS2: open source web-based platform managing health information Fingertips: repository public health indicators England {readepi} returns list object containing one data frames. {readepi} also number auxiliary functions allow importing subset original dataset. {readepi} developed Epiverse-TRACE team Medical Research Center, Gambia unit London School Hygiene Tropical Medicine.","code":""},{"path":"https://epiverse-trace.github.io/readepi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read Data From Health Information Systems","text":"can install development version {readepi} GitHub :","code":"if (!require(\"pak\")) install.packages(\"pak\") #> Loading required package: pak pak::pak(\"epiverse-trace/readepi\") #> ℹ Loading metadata database #> ✔ Loading metadata database ... done #>  #>  #> → Will install 89 packages. #> → Will update 1 package. #> → All 90 packages (90.99 MB) are cached. #> + askpass                 1.2.0        #> + backports               1.4.1        #> + base64enc               0.1-3        #> + bit                     4.0.5        #> + bit64                   4.0.5        #> + blob                    1.2.4        #> + bslib                   0.5.1        #> + cachem                  1.0.8        #> + cellranger              1.1.0        #> + checkmate               2.2.0        #> + cli                     3.6.1        #> + clipr                   0.8.0        #> + commonmark              1.9.0        #> + crayon                  1.5.2        #> + crosstalk               1.2.0        #> + curl                    5.0.2        #> + data.table              1.14.8       #> + DBI                     1.1.3        #> + digest                  0.6.33       #> + dplyr                   1.1.3        #> + DT                      0.29         #> + ellipsis                0.3.2        #> + evaluate                0.21         #> + fansi                   1.0.4        #> + fastmap                 1.1.1        #> + fingertipsR             1.0.10.9002 👷🏼‍♂️🔧 (GitHub: caa9b7b) #> + fontawesome             0.5.2        #> + forcats                 1.0.0        #> + fs                      1.6.3        #> + generics                0.1.3        #> + glue                    1.6.2        #> + haven                   2.5.3        #> + highr                   0.10         #> + hms                     1.1.3        #> + htmltools               0.5.6        #> + htmlwidgets             1.6.2        #> + httpuv                  1.6.11       #> + httr                    1.4.7        #> + jquerylib               0.1.4        #> + jsonlite                1.8.7        #> + knitr                   1.44         #> + later                   1.3.1        #> + lazyeval                0.2.2        #> + lifecycle               1.0.3        #> + magrittr                2.0.3        #> + memoise                 2.0.1        #> + mime                    0.12         #> + miniUI                  0.1.1.1      #> + odbc                    1.3.5        #> + openssl                 2.1.1        #> + pillar                  1.9.0        #> + pkgconfig               2.0.3        #> + pool                    1.0.1        #> + promises                1.2.1        #> + purrr                   1.0.2        #> + R.methodsS3             1.8.2        #> + R.oo                    1.25.0       #> + R.utils                 2.12.2       #> + R6                      2.5.1        #> + rappdirs                0.3.3        #> + Rcpp                    1.0.11       #> + readepi         1.0.0 → 0.0.1       👷‍♂️🔧 (GitHub: 6b4212c) #> + readr                   2.1.4        #> + readxl                  1.4.3        #> + REDCapR                 1.1.0        #> + rematch                 2.0.0        #> + rio                     1.0.1        #> + rlang                   1.1.1        #> + rmarkdown               2.25         #> + RMySQL                  0.10.26      #> + sass                    0.4.7        #> + shiny                   1.7.5        #> + shinycssloaders         1.0.0        #> + sourcetools             0.1.7-1      #> + stringi                 1.7.12       #> + stringr                 1.5.0        #> + sys                     3.4.2        #> + tibble                  3.2.1        #> + tidyr                   1.3.0        #> + tidyselect              1.2.0        #> + tinytex                 0.46         #> + tzdb                    0.4.0        #> + utf8                    1.2.3        #> + vctrs                   0.6.3        #> + vroom                   1.6.3        #> + withr                   2.5.1        #> + writexl                 1.4.2        #> + xfun                    0.40         #> + xtable                  1.8-4        #> + yaml                    2.3.7 #> ℹ No downloads are needed, 90 pkgs (90.99 MB) are cached #> ✔ Got pool 1.0.1 (aarch64-apple-darwin20) (187.78 kB) #> ✔ Got readxl 1.4.3 (aarch64-apple-darwin20) (1.54 MB) #> ✔ Got fastmap 1.1.1 (aarch64-apple-darwin20) (190.58 kB) #> ✔ Got memoise 2.0.1 (aarch64-apple-darwin20) (47.93 kB) #> ✔ Got rio 1.0.1 (aarch64-apple-darwin20) (591.50 kB) #> ✔ Got curl 5.0.2 (aarch64-apple-darwin20) (809.84 kB) #> ✔ Got fontawesome 0.5.2 (aarch64-apple-darwin20) (1.36 MB) #> ✔ Got sourcetools 0.1.7-1 (aarch64-apple-darwin20) (136.07 kB) #> ✔ Got htmltools 0.5.6 (aarch64-apple-darwin20) (356.41 kB) #> ✔ Got promises 1.2.1 (aarch64-apple-darwin20) (1.82 MB) #> ✔ Installed readepi 0.0.1 (github::epiverse-trace/readepi@6b4212c) (77ms) #> ✔ Installed DBI 1.1.3  (94ms) #> ✔ Installed R.methodsS3 1.8.2  (134ms) #> ✔ Installed R.oo 1.25.0  (143ms) #> ✔ Installed R.utils 2.12.2  (152ms) #> ✔ Installed R6 2.5.1  (160ms) #> ✔ Installed REDCapR 1.1.0  (176ms) #> ✔ Installed RMySQL 0.10.26  (187ms) #> ✔ Installed Rcpp 1.0.11  (197ms) #> ✔ Installed askpass 1.2.0  (206ms) #> ✔ Installed backports 1.4.1  (72ms) #> ✔ Installed bit64 4.0.5  (57ms) #> ✔ Installed bit 4.0.5  (34ms) #> ✔ Installed blob 1.2.4  (30ms) #> ✔ Installed cellranger 1.1.0  (36ms) #> ✔ Installed checkmate 2.2.0  (39ms) #> ✔ Installed cli 3.6.1  (35ms) #> ✔ Installed clipr 0.8.0  (31ms) #> ✔ Installed crayon 1.5.2  (29ms) #> ✔ Installed curl 5.0.2  (32ms) #> ✔ Installed data.table 1.14.8  (62ms) #> ✔ Installed dplyr 1.1.3  (36ms) #> ✔ Installed fansi 1.0.4  (32ms) #> ✔ Installed forcats 1.0.0  (30ms) #> ✔ Installed generics 0.1.3  (30ms) #> ✔ Installed glue 1.6.2  (31ms) #> ✔ Installed haven 2.5.3  (32ms) #> ✔ Installed hms 1.1.3  (31ms) #> ✔ Installed httr 1.4.7  (50ms) #> ✔ Installed jsonlite 1.8.7  (57ms) #> ✔ Installed later 1.3.1  (36ms) #> ✔ Installed lifecycle 1.0.3  (33ms) #> ✔ Installed magrittr 2.0.3  (32ms) #> ✔ Installed mime 0.12  (30ms) #> ✔ Installed odbc 1.3.5  (39ms) #> ✔ Installed openssl 2.1.1  (40ms) #> ✔ Installed pillar 1.9.0  (35ms) #> ✔ Installed pkgconfig 2.0.3  (56ms) #> ✔ Installed pool 1.0.1  (55ms) #> ✔ Installed purrr 1.0.2  (31ms) #> ✔ Installed readr 2.1.4  (33ms) #> ✔ Installed readxl 1.4.3  (35ms) #> ✔ Installed rematch 2.0.0  (32ms) #> ✔ Installed rio 1.0.1  (31ms) #> ✔ Installed rlang 1.1.1  (34ms) #> ✔ Installed stringr 1.5.0  (18ms) #> ✔ Installed sys 3.4.2  (20ms) #> ✔ Installed stringi 1.7.12  (125ms) #> ✔ Installed tibble 3.2.1  (44ms) #> ✔ Installed tidyr 1.3.0  (34ms) #> ✔ Installed tidyselect 1.2.0  (31ms) #> ✔ Installed tzdb 0.4.0  (31ms) #> ✔ Installed utf8 1.2.3  (31ms) #> ✔ Installed vctrs 0.6.3  (32ms) #> ✔ Installed withr 2.5.1  (15ms) #> ✔ Installed vroom 1.6.3  (86ms) #> ✔ Installed writexl 1.4.2  (32ms) #> ✔ Installed fingertipsR 1.0.10.9002 (github::rOpenSci/fingertipsR@caa9b7b) (30ms) #> ✔ Installed base64enc 0.1-3  (13ms) #> ✔ Installed DT 0.29  (82ms) #> ✔ Installed cachem 1.0.8  (15ms) #> ✔ Installed commonmark 1.9.0  (18ms) #> ✔ Installed crosstalk 1.2.0  (22ms) #> ✔ Installed bslib 0.5.1  (172ms) #> ✔ Installed digest 0.6.33  (58ms) #> ✔ Installed ellipsis 0.3.2  (30ms) #> ✔ Installed evaluate 0.21  (30ms) #> ✔ Installed fastmap 1.1.1  (32ms) #> ✔ Installed fontawesome 0.5.2  (31ms) #> ✔ Installed fs 1.6.3  (33ms) #> ✔ Installed highr 0.10  (32ms) #> ✔ Installed htmltools 0.5.6  (31ms) #> ✔ Installed htmlwidgets 1.6.2  (60ms) #> ✔ Installed httpuv 1.6.11  (62ms) #> ✔ Installed jquerylib 0.1.4  (34ms) #> ✔ Installed lazyeval 0.2.2  (16ms) #> ✔ Installed knitr 1.44  (66ms) #> ✔ Installed memoise 2.0.1  (38ms) #> ✔ Installed miniUI 0.1.1.1  (28ms) #> ✔ Installed promises 1.2.1  (30ms) #> ✔ Installed rappdirs 0.3.3  (31ms) #> ✔ Installed rmarkdown 2.25  (91ms) #> ✔ Installed sass 0.4.7  (66ms) #> ✔ Installed shinycssloaders 1.0.0  (17ms) #> ✔ Installed sourcetools 0.1.7-1  (21ms) #> ✔ Installed shiny 1.7.5  (98ms) #> ✔ Installed tinytex 0.46  (34ms) #> ✔ Installed xfun 0.40  (30ms) #> ✔ Installed xtable 1.8-4  (31ms) #> ✔ Installed yaml 2.3.7  (24ms) #> ✔ 1 pkg + 90 deps: upd 1, added 89, dld 10 (7.04 MB) [10.8s] library(readepi)"},{"path":"https://epiverse-trace.github.io/readepi/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Read Data From Health Information Systems","text":"main function {readepi} readepi(). reads data specified source. readepi() function accepts user-supplied string (API’s URL) argument. specific arguments can provided depending data source (see vignette details). examples show use readepi() function import data variety sources.","code":""},{"path":"https://epiverse-trace.github.io/readepi/index.html","id":"reading-data-from-rdbms-and-his","dir":"","previous_headings":"Quick start","what":"Reading data from RDBMS and HIS","title":"Read Data From Health Information Systems","text":"readepi() function can import data variety RDBMS, including MS SQL, MySQL, PostgreSQL. Reading data RDBMS requires following: MS SQL driver compatible version DBMS interest. vignette describes install appropriate driver database management system. Valid Credentials access server. user credential details expected stored file supplied argument readepi() function. Use show_example_file() function visualize structure template credential file. Users can read data RDBMS providing details tables interest SQL query (information, see vignette).","code":"# DISPLAY THE STRUCTUTRE OF THE TEMPLATE CREDENTIAL FILE show_example_file()  # DEFINE THE PATH TO THE CREDENTIAL FILE credentials_file <- system.file(\"extdata\", \"test.ini\", package = \"readepi\")  # READING FILE FROM A PROJECT IN A REDCap DATABASE dat <- readepi(   data_source      = \"https://bbmc.ouhsc.edu/redcap/api/\",   credentials_file = credentials_file ) project_data     <- dat$data # accessing the actual data project_metadeta <- dat$metadata # accessing the metadata associated with project  # VIEWING THE LIST OF ALL TABLES IN A MySQL DATABASE show_tables(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   driver_name      = \"\" # note that this example MySQL server does not require a driver )  # VISUAIZE FIRST 5 ROWS OF THE TABLE 'AUTHOR' visualise_table(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"author\", # this is the table name   driver_name      = \"\" )  # READING ALL FILEDS AND RECORDS FROM A MySQL SERVER dat <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = credentials_file,   from             = \"author\", # this is the table name   driver_name      = \"\" )  # READING DATA FROM DHIS2 dat <- readepi(   data_source        = \"https://play.dhis2.org/dev\",   credentials_file   = credentials_file,   dataset            = \"pBOMPrpg1QX\",   organisation_unit  = \"DiszpKrYNg8\",   data_element_group = NULL,   start_date         = \"2014\",   end_date           = \"2023\" )  # READING DATA FROM THE FINGERTIPS REPOSITORY dat <- readepi(   indicator_id        = 90362,   area_type_id        = 202,   parent_area_type_id = 6 # optional )"},{"path":"https://epiverse-trace.github.io/readepi/index.html","id":"package-vignettes","dir":"","previous_headings":"","what":"Package Vignettes","title":"Read Data From Health Information Systems","text":"vignette {readepi} package contains detailed illustrations use function description every argument. can accessed typing command :","code":"# OPEN THE VIGNETTE WITHIN RSTUDIO vignette(\"readepi\")  # OPEN THE VIGNETTE IN YOUR WEB BROWSER. browseVignettes(\"readepi\")"},{"path":[]},{"path":"https://epiverse-trace.github.io/readepi/index.html","id":"lifecycle","dir":"","previous_headings":"Development","what":"Lifecycle","title":"Read Data From Health Information Systems","text":"package currently maturing, defined RECON software lifecycle. means can used production understanding interface may still undergo minor changes.","code":""},{"path":"https://epiverse-trace.github.io/readepi/index.html","id":"contributions","dir":"","previous_headings":"Development","what":"Contributions","title":"Read Data From Health Information Systems","text":"Contributions welcome via pull requests.","code":""},{"path":"https://epiverse-trace.github.io/readepi/index.html","id":"code-of-conduct","dir":"","previous_headings":"Development","what":"Code of Conduct","title":"Read Data From Health Information Systems","text":"Please note {{ packagename }} project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/get_dhis2_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the target DHIS2 attribute identifiers and names — get_dhis2_attributes","title":"Get the target DHIS2 attribute identifiers and names — get_dhis2_attributes","text":"Get target DHIS2 attribute identifiers names","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/get_dhis2_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the target DHIS2 attribute identifiers and names — get_dhis2_attributes","text":"","code":"get_dhis2_attributes(   base_url = \"https://play.dhis2.org/dev/\",   username = \"admin\",   password = \"district\",   which = \"dataSets\" )"},{"path":"https://epiverse-trace.github.io/readepi/reference/get_dhis2_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the target DHIS2 attribute identifiers and names — get_dhis2_attributes","text":"base_url base URL DHIS2 server username user name password user's password target DHIS2 attribute name.","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/get_dhis2_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the target DHIS2 attribute identifiers and names — get_dhis2_attributes","text":"object type data.frame details DHIS2 attributes interest.","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/get_dhis2_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the target DHIS2 attribute identifiers and names — get_dhis2_attributes","text":"","code":"if (FALSE) { datasets <- get_dhis2_attributes(   base_url = \"https://play.dhis2.org/dev/\",   username = \"admin\",   password = \"district\",   which    = \"dataSets\" ) }"},{"path":"https://epiverse-trace.github.io/readepi/reference/readepi.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from different data_sources into R — readepi","title":"Import data from different data_sources into R — readepi","text":"function allows import data Health Information Systems (), files, folders.consist database management systems (DBMS) website public data collection.","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/readepi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from different data_sources into R — readepi","text":"","code":"readepi(   data_source = NULL,   records = NULL,   fields = NULL,   id_position = NULL,   id_col_name = NULL,   ... )"},{"path":"https://epiverse-trace.github.io/readepi/reference/readepi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from different data_sources into R — readepi","text":"data_source URL records vector comma-separated string subject IDs. specified, records imported. fields vector comma-separated string column names. provided, columns imported. id_position column position variable unique identifies subjects. name column subject IDs known, can provided using id_col_name argument id_col_name column name subject IDs. ... additional arguments passed readepi() function. enumerated described vignette.","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/readepi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from different data_sources into R — readepi","text":"list 1 several object type data frame.","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/readepi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from different data_sources into R — readepi","text":"","code":"# reading from a MySQL server if (FALSE) { data <- readepi(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = system.file(\"extdata\", \"test.ini\", package = \"readepi\"),   driver_name      = \"\",   from             = \"author\" ) }"},{"path":"https://epiverse-trace.github.io/readepi/reference/show_example_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the structure of the credentials file — show_example_file","title":"Display the structure of the credentials file — show_example_file","text":"Display structure credentials file","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/show_example_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the structure of the credentials file — show_example_file","text":"","code":"show_example_file()"},{"path":"https://epiverse-trace.github.io/readepi/reference/show_example_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the structure of the credentials file — show_example_file","text":"","code":"if (FALSE) {   show_example_file() }"},{"path":"https://epiverse-trace.github.io/readepi/reference/show_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the list of tables in a database — show_tables","title":"Display the list of tables in a database — show_tables","text":"Display list tables database","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/show_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the list of tables in a database — show_tables","text":"","code":"show_tables(data_source, credentials_file, driver_name)"},{"path":"https://epiverse-trace.github.io/readepi/reference/show_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the list of tables in a database — show_tables","text":"data_source URL interest credentials_file path file user-specific credential details projects interest. See help readepi function details. driver_name name MS driver. use odbc::odbcListDrivers() display list installed drivers","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/show_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display the list of tables in a database — show_tables","text":"character contains list tables found specified database","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/show_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the list of tables in a database — show_tables","text":"","code":"if (FALSE) { show_tables(   credentials_file = system.file(\"extdata\", \"test.ini\",                                  package = \"readepi\"),   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   driver_name      = \"\" ) }"},{"path":"https://epiverse-trace.github.io/readepi/reference/visualise_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the first 5 rows of the data from a table — visualise_table","title":"Visualize the first 5 rows of the data from a table — visualise_table","text":"Visualize first 5 rows data table","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/visualise_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the first 5 rows of the data from a table — visualise_table","text":"","code":"visualise_table(data_source, credentials_file, from, driver_name)"},{"path":"https://epiverse-trace.github.io/readepi/reference/visualise_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the first 5 rows of the data from a table — visualise_table","text":"data_source URL credentials_file path file user-specific credential details projects interest table name driver_name name MS driver","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/visualise_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the first 5 rows of the data from a table — visualise_table","text":"prints first 5 rows specified table","code":""},{"path":"https://epiverse-trace.github.io/readepi/reference/visualise_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the first 5 rows of the data from a table — visualise_table","text":"","code":"if (FALSE) { visualise_table(   data_source      = \"mysql-rfam-public.ebi.ac.uk\",   credentials_file = system.file(\"extdata\", \"test.ini\", package = \"readepi\"),   from             = \"author\",   driver_name      = \"\" ) }"}]
